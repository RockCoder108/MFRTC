/**
 * Detect if the click is within the target element including the margin
 * @param element: HTMLElement = Element target
 * @param mouseEvent: MouseEvent = To know coordinates of click
 * @return boolean
 * @file template.utility.ts
 */
export function isElementClicked(element, mouseEvent) {
    const radix = 10;
    const styleTarget = window.getComputedStyle(element);
    const targetRect = element.getBoundingClientRect();
    const targetTop = targetRect.top - parseInt(styleTarget.marginTop, radix);
    const targetBottom = targetRect.bottom + parseInt(styleTarget.marginBottom, radix);
    const targetRight = targetRect.right + parseInt(styleTarget.marginRight, radix);
    const targetLeft = targetRect.left - parseInt(styleTarget.marginLeft, radix);
    return (mouseEvent.clientX >= targetLeft && mouseEvent.clientX <= targetRight &&
        mouseEvent.clientY >= targetTop && mouseEvent.clientY <= targetBottom);
}
/**
 * Handle icons validation when validationStatus variable is decleared
 * @public
 * @returns string: icon name. can be check_circle | warning | error
 * @file template.utility.ts
 */
export function getIconValidationStatus(validation) {
    let status = '';
    switch (validation) {
        case 'success':
            status = 'check_circle';
            break;
        case 'warning':
            status = 'warning';
            break;
        case 'error':
            status = 'error';
            break;
    }
    return status;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUudXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvc3JjL2xpYi9zZXJ2aWNlL3V0aWxpdGllcy90ZW1wbGF0ZS51dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUFvQixFQUFFLFVBQXNCO0lBQ3pFLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFFbkQsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25GLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEYsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUU3RSxPQUFPLENBQ0gsVUFBVSxDQUFDLE9BQU8sSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sSUFBSSxXQUFXO1FBQ3JFLFVBQVUsQ0FBQyxPQUFPLElBQUksU0FBUyxJQUFJLFVBQVUsQ0FBQyxPQUFPLElBQUksWUFBWSxDQUN4RSxDQUFBO0FBQ0wsQ0FBQztBQUdEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFVBQTRDO0lBQ2hGLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixRQUFRLFVBQVUsRUFBRSxDQUFDO1FBQ2pCLEtBQUssU0FBUztZQUNWLE1BQU0sR0FBRyxjQUFjLENBQUM7WUFDeEIsTUFBTTtRQUNWLEtBQUssU0FBUztZQUNWLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDbkIsTUFBTTtRQUNWLEtBQUssT0FBTztZQUNSLE1BQU0sR0FBRyxPQUFPLENBQUM7WUFDakIsTUFBTTtJQUNkLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldGVjdCBpZiB0aGUgY2xpY2sgaXMgd2l0aGluIHRoZSB0YXJnZXQgZWxlbWVudCBpbmNsdWRpbmcgdGhlIG1hcmdpblxyXG4gKiBAcGFyYW0gZWxlbWVudDogSFRNTEVsZW1lbnQgPSBFbGVtZW50IHRhcmdldFxyXG4gKiBAcGFyYW0gbW91c2VFdmVudDogTW91c2VFdmVudCA9IFRvIGtub3cgY29vcmRpbmF0ZXMgb2YgY2xpY2tcclxuICogQHJldHVybiBib29sZWFuXHJcbiAqIEBmaWxlIHRlbXBsYXRlLnV0aWxpdHkudHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnRDbGlja2VkKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCByYWRpeCA9IDEwO1xyXG4gICAgY29uc3Qgc3R5bGVUYXJnZXQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAgIGNvbnN0IHRhcmdldFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldFRvcCA9IHRhcmdldFJlY3QudG9wIC0gcGFyc2VJbnQoc3R5bGVUYXJnZXQubWFyZ2luVG9wLCByYWRpeCk7XHJcbiAgICBjb25zdCB0YXJnZXRCb3R0b20gPSB0YXJnZXRSZWN0LmJvdHRvbSArIHBhcnNlSW50KHN0eWxlVGFyZ2V0Lm1hcmdpbkJvdHRvbSwgcmFkaXgpO1xyXG4gICAgY29uc3QgdGFyZ2V0UmlnaHQgPSB0YXJnZXRSZWN0LnJpZ2h0ICsgcGFyc2VJbnQoc3R5bGVUYXJnZXQubWFyZ2luUmlnaHQsIHJhZGl4KTtcclxuICAgIGNvbnN0IHRhcmdldExlZnQgPSB0YXJnZXRSZWN0LmxlZnQgLSBwYXJzZUludChzdHlsZVRhcmdldC5tYXJnaW5MZWZ0LCByYWRpeCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICBtb3VzZUV2ZW50LmNsaWVudFggPj0gdGFyZ2V0TGVmdCAmJiBtb3VzZUV2ZW50LmNsaWVudFggPD0gdGFyZ2V0UmlnaHQgJiZcclxuICAgICAgICBtb3VzZUV2ZW50LmNsaWVudFkgPj0gdGFyZ2V0VG9wICYmIG1vdXNlRXZlbnQuY2xpZW50WSA8PSB0YXJnZXRCb3R0b21cclxuICAgIClcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGUgaWNvbnMgdmFsaWRhdGlvbiB3aGVuIHZhbGlkYXRpb25TdGF0dXMgdmFyaWFibGUgaXMgZGVjbGVhcmVkXHJcbiAqIEBwdWJsaWNcclxuICogQHJldHVybnMgc3RyaW5nOiBpY29uIG5hbWUuIGNhbiBiZSBjaGVja19jaXJjbGUgfCB3YXJuaW5nIHwgZXJyb3JcclxuICogQGZpbGUgdGVtcGxhdGUudXRpbGl0eS50c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEljb25WYWxpZGF0aW9uU3RhdHVzKHZhbGlkYXRpb24/OiAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZXJyb3InKTogc3RyaW5nIHtcclxuICAgIGxldCBzdGF0dXMgPSAnJztcclxuICAgIHN3aXRjaCAodmFsaWRhdGlvbikge1xyXG4gICAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxyXG4gICAgICAgICAgICBzdGF0dXMgPSAnY2hlY2tfY2lyY2xlJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnd2FybmluZyc6XHJcbiAgICAgICAgICAgIHN0YXR1cyA9ICd3YXJuaW5nJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZXJyb3InOlxyXG4gICAgICAgICAgICBzdGF0dXMgPSAnZXJyb3InO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0dXM7XHJcbn1cclxuXHJcbiJdfQ==