import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { InputType } from "./model/type/InputType";
import { InputBaseComponent } from "../../../core/input-base/input-base";
import { Icon, Icons } from "../../../model/interface/icon.interface";
import * as i0 from "@angular/core";
export declare class TextComponent extends InputBaseComponent<string> implements OnInit {
    private elementRef;
    placeholder: string;
    type?: InputType;
    icons?: Icons;
    onIconClick: EventEmitter<Icon>;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    /**
     * Handle icons validation when validationStatus variable is decleared
     * @public
     * @returns string: icon name. can be check_circle | warning | error
     * @member TextComponent
     */
    getIconValidationStatus(): string;
    /**
     * checks width component if there are space to visualize custom icons, text and validation icon
     * @public
     * @returns boolean: show validation icon
     * @member TextComponent
     */
    isValidationIconVisible(): boolean;
    /**
     * Handle the click of icons into input check. Method check icon declearation to see if developer sets clickble.
     * Default focus input
     * @public
     * @returns boolean: show validation icon
     * @param elClicked: string = id to know who called method
     * @param inputElement: HTMLInputElement = Input div to focus
     * @param mouseEvent: MouseEvent = need to calculate if clicked padding when icons are clickable
     * @member TextComponent
     */
    handleClick(inputElement: HTMLInputElement, elClicked?: string, mouseEvent?: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TextComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TextComponent, "e-mon-text", never, { "placeholder": { "alias": "placeholder"; "required": false; }; "type": { "alias": "type"; "required": false; }; "icons": { "alias": "icons"; "required": false; }; }, { "onIconClick": "onIconClick"; }, never, never, false, never>;
}
