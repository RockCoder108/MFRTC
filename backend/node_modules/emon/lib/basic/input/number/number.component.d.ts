import { ElementRef, OnInit } from "@angular/core";
import { InputBaseComponent } from "../../../core/input-base/input-base";
import { Icon } from "../../../model/interface/icon.interface";
import { TextComponent } from "../text/text.component";
import * as i0 from "@angular/core";
export declare class NumberComponent extends InputBaseComponent<number> implements OnInit {
    private elementRef;
    step: number;
    inputTextComponent: TextComponent;
    pattern: string;
    set value(val: number | undefined | null);
    get value(): number | undefined | null;
    readonly icons: {
        left: {
            name: string;
            color: string;
            clickable: boolean;
        };
        right: {
            name: string;
            color: string;
            clickable: boolean;
        };
    };
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    /**
     * Check keyboard when press and not take value if not inherent of number
     * @public
     * @returns
     * @member NumberComponent
     */
    checkKeyPressed(eventKB: KeyboardEvent): void;
    /**
     * Set value when click buttons add/sub
     * @public
     * @returns
     * @member NumberComponent
     */
    onIconClick(icon: Icon): void;
    /**
     * Set the pattern to apply on input with number of decimal
     * @public
     * @returns
     * @member NumberComponent
     */
    checkDecimalLenght(): void;
    /**
     * Handle icons validation when validationStatus variable is decleared
     * @public
     * @returns string: icon name. can be check_circle | warning | error
     * @member NumberComponent
     */
    getIconValidationStatus(): string;
    /**
     * Calculate length of decimal based on step. If last numbers are zero they are not recognized
     * @private
     * @returns number = length of decimal
     * @member NumberComponent
     */
    private getLenghtDecimalSeparator;
    /**
     * set right value with right number of decimal
     * @private
     * @returns number = right value with right length of decimal
     * @member NumberComponent
     */
    private getRightDecimal;
    static ɵfac: i0.ɵɵFactoryDeclaration<NumberComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NumberComponent, "e-mon-number", never, { "step": { "alias": "step"; "required": false; }; }, {}, never, never, false, never>;
}
